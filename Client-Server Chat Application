Client code: 
import socket
import threading
import tkinter as tk
from tkinter import scrolledtext

def receive_messages(client_socket, text_area):
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                text_area.config(state=tk.NORMAL)
                text_area.insert(tk.END, "Server: " + message + '\n')
                text_area.config(state=tk.DISABLED)
                text_area.yview(tk.END)
            else:
                print("Connection closed by server")
                break
        except Exception as e:
            print(f"Error receiving message: {e}")
            break

    client_socket.close()

def send_message(client_socket, entry_field):
    message = entry_field.get()
    if message:
        try:
            client_socket.send(message.encode('utf-8'))
            entry_field.delete(0, tk.END)
        except Exception as e:
            print(f"Error sending message: {e}")

def main():
    # Setup client
    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect(('127.0.0.1', 5555))

    # Setup GUI
    root = tk.Tk()
    root.title("Chat Application - Client")

    text_area = scrolledtext.ScrolledText(root, state=tk.DISABLED, wrap=tk.WORD)
    text_area.pack(padx=10, pady=10)

    entry_field = tk.Entry(root, width=50)
    entry_field.pack(padx=10, pady=10)
    entry_field.bind("<Return>", lambda event: send_message(client, entry_field))

    send_button = tk.Button(root, text="Send", command=lambda: send_message(client, entry_field))
    send_button.pack(padx=10, pady=10)

    # Start the receive thread
    receive_thread = threading.Thread(target=receive_messages, args=(client, text_area))
    receive_thread.start()

    root.mainloop()

if __name__ == "__main__":
    main()





Server code: 
import socket
import threading
import tkinter as tk
from tkinter import scrolledtext

def receive_messages(client_socket, text_area):
    while True:
        try:
            message = client_socket.recv(1024).decode('utf-8')
            if message:
                text_area.config(state=tk.NORMAL)
                text_area.insert(tk.END, "Client: " + message + '\n')
                text_area.config(state=tk.DISABLED)
                text_area.yview(tk.END)
            else:
                print("Connection closed by client")
                break
        except Exception as e:
            print(f"Error receiving message: {e}")
            break

    client_socket.close()

def send_message(client_socket, entry_field):
    message = entry_field.get()
    if message:
        try:
            client_socket.send(message.encode('utf-8'))
            entry_field.delete(0, tk.END)
        except Exception as e:
            print(f"Error sending message: {e}")

def main():
    global root, message_area

    # Setup server
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(('0.0.0.0', 5555))
    server.listen(1)
    print("Server is waiting for a connection...")

    client_socket, addr = server.accept()
    print(f"Accepted connection from {addr}")

    # Setup GUI
    root = tk.Tk()
    root.title("Chat Application - Server")

    message_area = scrolledtext.ScrolledText(root, state=tk.DISABLED, wrap=tk.WORD)
    message_area.pack(padx=10, pady=10)

    entry_field = tk.Entry(root, width=50)
    entry_field.pack(padx=10, pady=10)
    entry_field.bind("<Return>", lambda event: send_message(client_socket, entry_field))

    send_button = tk.Button(root, text="Send", command=lambda: send_message(client_socket, entry_field))
    send_button.pack(padx=10, pady=10)

    # Start the receive thread
    receive_thread = threading.Thread(target=receive_messages, args=(client_socket, message_area))
    receive_thread.start()

    root.mainloop()

if __name__ == "__main__":
    main()
